name: SonarCloud Analysis
on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write
  issues: write

jobs:
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.branch.name=${{ github.head_ref || github.ref_name }}

      - name: Generate and post detailed metrics comment
        if: github.event_name == 'pull_request'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          CURRENT_BRANCH: ${{ github.head_ref }}
          BASE_BRANCH: ${{ github.base_ref }}
        run: |
          #!/bin/bash
          set -e

          # メトリクスの定義
          METRICS="complexity,cognitive_complexity,function_complexity,duplicated_lines_density"
          
          # コメント用の変数を初期化
          COMMENT="## SonarCloud File-level Complexity Metrics\n\n"
          
          # 総合的な差分を追跡するための変数
          TOTAL_COMPLEXITY_DIFF=0
          TOTAL_COG_COMPLEXITY_DIFF=0
          
          # component_treeで変更されたファイルを取得
          CHANGED_FILES_JSON=$(curl -s -f -u "${SONAR_TOKEN}:" \
            "https://sonarcloud.io/api/measures/component_tree?branch=${CURRENT_BRANCH}&qualifiers=FIL&component=${PROJECT_KEY}&metricKeys=${METRICS}")
          
          # コンポーネントの数を取得
          COMPONENT_COUNT=$(echo "${CHANGED_FILES_JSON}" | jq '.components | length')
          
          echo "Found ${COMPONENT_COUNT} components"

          # URLエンコード関数
          urlencode() {
            local raw="$1"
            local encoded=""
            for ((i=0; i<${#raw}; i++)); do
              local c="${raw:i:1}"
              case "$c" in
                [a-zA-Z0-9._~-]) encoded+="$c" ;;
                *) encoded+=$(printf '%%%02X' "'$c") ;;
              esac
            done
            echo "$encoded"
          }

          # 各コンポーネントに対してループ
          for ((i=0; i<COMPONENT_COUNT; i++)); do
            # コンポーネントの詳細を取得
            COMPONENT=$(echo "${CHANGED_FILES_JSON}" | jq ".components[${i}]")
            FILE_KEY=$(urlencode $(echo "${COMPONENT}" | jq -r '.key'))
            FILE_PATH=$(echo "${COMPONENT}" | jq -r '.path')
            
            # デバッグ用: ファイル情報を表示
            echo "Processing component key: ${FILE_KEY}, file: ${FILE_PATH}"
            
            COMPLEXITY_CURRENT_ORIGIN=$(echo "${COMPONENT}" | jq -r '.measures[] | select(.metric == "complexity") | .value // "0"')
            echo "COMPLEXITY_CURRENT_ORIGIN: ${COMPLEXITY_CURRENT_ORIGIN}"

            # 現在のブランチのファイルメトリクスを取得
            CURRENT_FILE_METRICS=$(curl -s -f -u "${SONAR_TOKEN}:" \
              "https://sonarcloud.io/api/measures/component?branch=${CURRENT_BRANCH}&component=${FILE_KEY}&metricKeys=${METRICS}")
            
            # ターゲットブランチのファイルメトリクスを取得
            TARGET_FILE_METRICS=$(curl -s -f -u "${SONAR_TOKEN}:" \
              "https://sonarcloud.io/api/measures/component?branch=${BASE_BRANCH}&component=${FILE_KEY}&metricKeys=${METRICS}")
            
            # メトリクスが存在するかチェック
            if [[ -z "$CURRENT_FILE_METRICS" ]] || [[ -z "$TARGET_FILE_METRICS" ]]; then
              echo "Metrics not found for file: ${FILE_PATH}"
              continue
            fi
            
            # 各メトリクスの差分を計算
            COMPLEXITY_CURRENT=$(echo "${CURRENT_FILE_METRICS}" | jq -r '.component.measures[] | select(.metric == "complexity") | .value // "0"')
            echo "COMPLEXITY_CURRENT: ${COMPLEXITY_CURRENT}"
            COMPLEXITY_TARGET=$(echo "${TARGET_FILE_METRICS}" | jq -r '.component.measures[] | select(.metric == "complexity") | .value // "0"')
            COMPLEXITY_DIFF=$((COMPLEXITY_CURRENT - COMPLEXITY_TARGET))
            
            COG_COMPLEXITY_CURRENT=$(echo "${CURRENT_FILE_METRICS}" | jq -r '.component.measures[] | select(.metric == "cognitive_complexity") | .value // "0"')
            COG_COMPLEXITY_TARGET=$(echo "${TARGET_FILE_METRICS}" | jq -r '.component.measures[] | select(.metric == "cognitive_complexity") | .value // "0"')
            COG_COMPLEXITY_DIFF=$((COG_COMPLEXITY_CURRENT - COG_COMPLEXITY_TARGET))
            
            # 総合的な差分に追加
            TOTAL_COMPLEXITY_DIFF=$((TOTAL_COMPLEXITY_DIFF + COMPLEXITY_DIFF))
            TOTAL_COG_COMPLEXITY_DIFF=$((TOTAL_COG_COMPLEXITY_DIFF + COG_COMPLEXITY_DIFF))
            
            # コメントに追加
            COMMENT+="### File: \`${FILE_PATH}\`\n"
            COMMENT+="- Cyclomatic Complexity: Current: \`${COMPLEXITY_CURRENT}\`, Target: \`${COMPLEXITY_TARGET}\`, Difference: \`${COMPLEXITY_DIFF}\`\n"
            COMMENT+="- Cognitive Complexity: Current: \`${COG_COMPLEXITY_CURRENT}\`, Target: \`${COG_COMPLEXITY_TARGET}\`, Difference: \`${COG_COMPLEXITY_DIFF}\`\n\n"
          done
          
          # 総合的な結果をコメントに追加
          COMMENT+="## Total Project Changes\n"
          COMMENT+="- Total Cyclomatic Complexity Difference: \`${TOTAL_COMPLEXITY_DIFF}\`\n"
          COMMENT+="- Total Cognitive Complexity Difference: \`${TOTAL_COG_COMPLEXITY_DIFF}\`\n"
          
          # コメントをファイルに保存
          echo -e "$COMMENT" > comment.txt
          
          # デバッグ用: 生成されたコメントを表示
          cat comment.txt

      - name: Post comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('comment.txt', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
